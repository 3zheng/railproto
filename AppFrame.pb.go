// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.3
// source: AppFrame.proto

package protodefine

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CMDID_AppFrame int32

const (
	CMDID_AppFrame_IDUnknow CMDID_AppFrame = 0 //保留
	// / Gate客户端的用户关联信息 Online/Login---->Gate
	// 目前主要是Online 发送到Gate,
	// 表示连接到Gate的某个客户端连接是否关联了某个用户
	CMDID_AppFrame_IDGateClientAuth CMDID_AppFrame = 1
	// /Gate客户端的心跳信息 Gate-->Online
	// 定时或者连接断开时，发送到Online,
	// Online 用来判断 某用户的连接是否断开，
	// 是否还在线
	CMDID_AppFrame_IDGateSingleConnectPulse CMDID_AppFrame = 2
	// /用户上线
	// 主要是Online 用来告之其他app,如财富、比赛、列表、任务等等，
	// 某个用户上线了，或者重新上线了
	// 对于比赛服务器来说，需要客户端主动发送
	CMDID_AppFrame_IDUserOnlineReq CMDID_AppFrame = 3
	// 表示服务器是否允许该用户进入到此
	// 或者比赛服务器告诉给Online 说，某用户已经离开了该房间
	// 暂时同时使用这样一个报文，在以后可以根据需要定义新的报文
	CMDID_AppFrame_IDUserOnlineRsp CMDID_AppFrame = 4
	CMDID_AppFrame_IDUserOffline   CMDID_AppFrame = 5 //玩家离开了，一般由Online 发给其他
	// 订阅事件
	// 1）用户登录成功
	// 2）用户注销
	CMDID_AppFrame_IDSubscribeReq         CMDID_AppFrame = 6
	CMDID_AppFrame_IDUserLeaveMatchNotify CMDID_AppFrame = 7  //用户从比赛中离开了
	CMDID_AppFrame_IDQueryUserInfoReq     CMDID_AppFrame = 9  ///查询用户信息
	CMDID_AppFrame_IDQueryUserInfoRsp     CMDID_AppFrame = 10 ///查询用户信息回复
	CMDID_AppFrame_IDChangeFundReq        CMDID_AppFrame = 11 //变更请求
	CMDID_AppFrame_IDChangeFundRsp        CMDID_AppFrame = 12 //变更回复
	CMDID_AppFrame_IDAppHeartPulse        CMDID_AppFrame = 13 //心跳同步
	CMDID_AppFrame_IDWorkLoadReq          CMDID_AppFrame = 14 //工作负载查询
	CMDID_AppFrame_IDWorkLoadRsp          CMDID_AppFrame = 15 //工作负载回复
	CMDID_AppFrame_IDMsgToBatchUsers      CMDID_AppFrame = 16 //向批量用户发送同一个消息
	CMDID_AppFrame_IDStopAppReq           CMDID_AppFrame = 17 //通知APP停止处理报文并关闭请求
	CMDID_AppFrame_IDStopAppRsp           CMDID_AppFrame = 18 //通知APP停止处理报文并关闭回复
	// 系统消息广播
	CMDID_AppFrame_IDBroadcastToCenter CMDID_AppFrame = 19 //发往中心服务器的广播消息
	CMDID_AppFrame_IDBroadcastToClient CMDID_AppFrame = 20 //发往客户端（即gate)的广播消息
	CMDID_AppFrame_IDLast              CMDID_AppFrame = 100
)

// Enum value maps for CMDID_AppFrame.
var (
	CMDID_AppFrame_name = map[int32]string{
		0:   "IDUnknow",
		1:   "IDGateClientAuth",
		2:   "IDGateSingleConnectPulse",
		3:   "IDUserOnlineReq",
		4:   "IDUserOnlineRsp",
		5:   "IDUserOffline",
		6:   "IDSubscribeReq",
		7:   "IDUserLeaveMatchNotify",
		9:   "IDQueryUserInfoReq",
		10:  "IDQueryUserInfoRsp",
		11:  "IDChangeFundReq",
		12:  "IDChangeFundRsp",
		13:  "IDAppHeartPulse",
		14:  "IDWorkLoadReq",
		15:  "IDWorkLoadRsp",
		16:  "IDMsgToBatchUsers",
		17:  "IDStopAppReq",
		18:  "IDStopAppRsp",
		19:  "IDBroadcastToCenter",
		20:  "IDBroadcastToClient",
		100: "IDLast",
	}
	CMDID_AppFrame_value = map[string]int32{
		"IDUnknow":                 0,
		"IDGateClientAuth":         1,
		"IDGateSingleConnectPulse": 2,
		"IDUserOnlineReq":          3,
		"IDUserOnlineRsp":          4,
		"IDUserOffline":            5,
		"IDSubscribeReq":           6,
		"IDUserLeaveMatchNotify":   7,
		"IDQueryUserInfoReq":       9,
		"IDQueryUserInfoRsp":       10,
		"IDChangeFundReq":          11,
		"IDChangeFundRsp":          12,
		"IDAppHeartPulse":          13,
		"IDWorkLoadReq":            14,
		"IDWorkLoadRsp":            15,
		"IDMsgToBatchUsers":        16,
		"IDStopAppReq":             17,
		"IDStopAppRsp":             18,
		"IDBroadcastToCenter":      19,
		"IDBroadcastToClient":      20,
		"IDLast":                   100,
	}
)

func (x CMDID_AppFrame) Enum() *CMDID_AppFrame {
	p := new(CMDID_AppFrame)
	*p = x
	return p
}

func (x CMDID_AppFrame) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMDID_AppFrame) Descriptor() protoreflect.EnumDescriptor {
	return file_AppFrame_proto_enumTypes[0].Descriptor()
}

func (CMDID_AppFrame) Type() protoreflect.EnumType {
	return &file_AppFrame_proto_enumTypes[0]
}

func (x CMDID_AppFrame) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CMDID_AppFrame.Descriptor instead.
func (CMDID_AppFrame) EnumDescriptor() ([]byte, []int) {
	return file_AppFrame_proto_rawDescGZIP(), []int{0}
}

type EventType_Online int32

const (
	EventType_Online_ETUnknow        EventType_Online = 0 //保留
	EventType_Online_ETOnline_Login  EventType_Online = 1 //登录
	EventType_Online_ETOnline_Logout EventType_Online = 2 //注销
)

// Enum value maps for EventType_Online.
var (
	EventType_Online_name = map[int32]string{
		0: "ETUnknow",
		1: "ETOnline_Login",
		2: "ETOnline_Logout",
	}
	EventType_Online_value = map[string]int32{
		"ETUnknow":        0,
		"ETOnline_Login":  1,
		"ETOnline_Logout": 2,
	}
)

func (x EventType_Online) Enum() *EventType_Online {
	p := new(EventType_Online)
	*p = x
	return p
}

func (x EventType_Online) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType_Online) Descriptor() protoreflect.EnumDescriptor {
	return file_AppFrame_proto_enumTypes[1].Descriptor()
}

func (EventType_Online) Type() protoreflect.EnumType {
	return &file_AppFrame_proto_enumTypes[1]
}

func (x EventType_Online) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType_Online.Descriptor instead.
func (EventType_Online) EnumDescriptor() ([]byte, []int) {
	return file_AppFrame_proto_rawDescGZIP(), []int{1}
}

type GateClientAuth_State int32

const (
	GateClientAuth_AuthSet          GateClientAuth_State = 0 //设置用户ID
	GateClientAuth_AuthClear        GateClientAuth_State = 1 //清除用户ID
	GateClientAuth_AuthClearPassive GateClientAuth_State = 2 //被动清除
)

// Enum value maps for GateClientAuth_State.
var (
	GateClientAuth_State_name = map[int32]string{
		0: "AuthSet",
		1: "AuthClear",
		2: "AuthClearPassive",
	}
	GateClientAuth_State_value = map[string]int32{
		"AuthSet":          0,
		"AuthClear":        1,
		"AuthClearPassive": 2,
	}
)

func (x GateClientAuth_State) Enum() *GateClientAuth_State {
	p := new(GateClientAuth_State)
	*p = x
	return p
}

func (x GateClientAuth_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GateClientAuth_State) Descriptor() protoreflect.EnumDescriptor {
	return file_AppFrame_proto_enumTypes[2].Descriptor()
}

func (GateClientAuth_State) Type() protoreflect.EnumType {
	return &file_AppFrame_proto_enumTypes[2]
}

func (x GateClientAuth_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GateClientAuth_State.Descriptor instead.
func (GateClientAuth_State) EnumDescriptor() ([]byte, []int) {
	return file_AppFrame_proto_rawDescGZIP(), []int{0, 0}
}

type UserOnlineReq_OnlineType int32

const (
	UserOnlineReq_IDUnknow    UserOnlineReq_OnlineType = 0 //保留
	UserOnlineReq_OL_Online   UserOnlineReq_OnlineType = 1 //上线
	UserOnlineReq_OL_ReOnline UserOnlineReq_OnlineType = 2 //断线或顶掉上线
)

// Enum value maps for UserOnlineReq_OnlineType.
var (
	UserOnlineReq_OnlineType_name = map[int32]string{
		0: "IDUnknow",
		1: "OL_Online",
		2: "OL_ReOnline",
	}
	UserOnlineReq_OnlineType_value = map[string]int32{
		"IDUnknow":    0,
		"OL_Online":   1,
		"OL_ReOnline": 2,
	}
)

func (x UserOnlineReq_OnlineType) Enum() *UserOnlineReq_OnlineType {
	p := new(UserOnlineReq_OnlineType)
	*p = x
	return p
}

func (x UserOnlineReq_OnlineType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserOnlineReq_OnlineType) Descriptor() protoreflect.EnumDescriptor {
	return file_AppFrame_proto_enumTypes[3].Descriptor()
}

func (UserOnlineReq_OnlineType) Type() protoreflect.EnumType {
	return &file_AppFrame_proto_enumTypes[3]
}

func (x UserOnlineReq_OnlineType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserOnlineReq_OnlineType.Descriptor instead.
func (UserOnlineReq_OnlineType) EnumDescriptor() ([]byte, []int) {
	return file_AppFrame_proto_rawDescGZIP(), []int{2, 0}
}

type UserOnlineRsp_Result int32

const (
	UserOnlineRsp_IDUnknow UserOnlineRsp_Result = 0 //保留
	UserOnlineRsp_SUCCESS  UserOnlineRsp_Result = 1 //成功
	UserOnlineRsp_FAIL     UserOnlineRsp_Result = 2 //失败
)

// Enum value maps for UserOnlineRsp_Result.
var (
	UserOnlineRsp_Result_name = map[int32]string{
		0: "IDUnknow",
		1: "SUCCESS",
		2: "FAIL",
	}
	UserOnlineRsp_Result_value = map[string]int32{
		"IDUnknow": 0,
		"SUCCESS":  1,
		"FAIL":     2,
	}
)

func (x UserOnlineRsp_Result) Enum() *UserOnlineRsp_Result {
	p := new(UserOnlineRsp_Result)
	*p = x
	return p
}

func (x UserOnlineRsp_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserOnlineRsp_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_AppFrame_proto_enumTypes[4].Descriptor()
}

func (UserOnlineRsp_Result) Type() protoreflect.EnumType {
	return &file_AppFrame_proto_enumTypes[4]
}

func (x UserOnlineRsp_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserOnlineRsp_Result.Descriptor instead.
func (UserOnlineRsp_Result) EnumDescriptor() ([]byte, []int) {
	return file_AppFrame_proto_rawDescGZIP(), []int{3, 0}
}

type UserOffline_OfflineType int32

const (
	UserOffline_IDUnknow   UserOffline_OfflineType = 0 //保留
	UserOffline_OL_Break   UserOffline_OfflineType = 3 //掉线
	UserOffline_OL_OffLine UserOffline_OfflineType = 4 //离开
	UserOffline_OL_TimeOut UserOffline_OfflineType = 5 //超时离开
)

// Enum value maps for UserOffline_OfflineType.
var (
	UserOffline_OfflineType_name = map[int32]string{
		0: "IDUnknow",
		3: "OL_Break",
		4: "OL_OffLine",
		5: "OL_TimeOut",
	}
	UserOffline_OfflineType_value = map[string]int32{
		"IDUnknow":   0,
		"OL_Break":   3,
		"OL_OffLine": 4,
		"OL_TimeOut": 5,
	}
)

func (x UserOffline_OfflineType) Enum() *UserOffline_OfflineType {
	p := new(UserOffline_OfflineType)
	*p = x
	return p
}

func (x UserOffline_OfflineType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserOffline_OfflineType) Descriptor() protoreflect.EnumDescriptor {
	return file_AppFrame_proto_enumTypes[5].Descriptor()
}

func (UserOffline_OfflineType) Type() protoreflect.EnumType {
	return &file_AppFrame_proto_enumTypes[5]
}

func (x UserOffline_OfflineType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserOffline_OfflineType.Descriptor instead.
func (UserOffline_OfflineType) EnumDescriptor() ([]byte, []int) {
	return file_AppFrame_proto_rawDescGZIP(), []int{4, 0}
}

type QueryUserInfoRsp_Result int32

const (
	QueryUserInfoRsp_IDUnknow  QueryUserInfoRsp_Result = 0 //保留
	QueryUserInfoRsp_SUCCESS   QueryUserInfoRsp_Result = 1
	QueryUserInfoRsp_NOT_EXIST QueryUserInfoRsp_Result = 2
)

// Enum value maps for QueryUserInfoRsp_Result.
var (
	QueryUserInfoRsp_Result_name = map[int32]string{
		0: "IDUnknow",
		1: "SUCCESS",
		2: "NOT_EXIST",
	}
	QueryUserInfoRsp_Result_value = map[string]int32{
		"IDUnknow":  0,
		"SUCCESS":   1,
		"NOT_EXIST": 2,
	}
)

func (x QueryUserInfoRsp_Result) Enum() *QueryUserInfoRsp_Result {
	p := new(QueryUserInfoRsp_Result)
	*p = x
	return p
}

func (x QueryUserInfoRsp_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryUserInfoRsp_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_AppFrame_proto_enumTypes[6].Descriptor()
}

func (QueryUserInfoRsp_Result) Type() protoreflect.EnumType {
	return &file_AppFrame_proto_enumTypes[6]
}

func (x QueryUserInfoRsp_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryUserInfoRsp_Result.Descriptor instead.
func (QueryUserInfoRsp_Result) EnumDescriptor() ([]byte, []int) {
	return file_AppFrame_proto_rawDescGZIP(), []int{6, 0}
}

type SubscribeReq_Operations int32

const (
	SubscribeReq_IDUnknow         SubscribeReq_Operations = 0 //保留
	SubscribeReq_SUBSCRIBE        SubscribeReq_Operations = 1
	SubscribeReq_CANCEL_SUBSCRIBE SubscribeReq_Operations = 2
	SubscribeReq_CANCEL_ALL       SubscribeReq_Operations = 3 //取消该APP的所有用户订阅
	SubscribeReq_SUBSCRIBE_ALL    SubscribeReq_Operations = 4 //订阅所有用户,list重启时用
)

// Enum value maps for SubscribeReq_Operations.
var (
	SubscribeReq_Operations_name = map[int32]string{
		0: "IDUnknow",
		1: "SUBSCRIBE",
		2: "CANCEL_SUBSCRIBE",
		3: "CANCEL_ALL",
		4: "SUBSCRIBE_ALL",
	}
	SubscribeReq_Operations_value = map[string]int32{
		"IDUnknow":         0,
		"SUBSCRIBE":        1,
		"CANCEL_SUBSCRIBE": 2,
		"CANCEL_ALL":       3,
		"SUBSCRIBE_ALL":    4,
	}
)

func (x SubscribeReq_Operations) Enum() *SubscribeReq_Operations {
	p := new(SubscribeReq_Operations)
	*p = x
	return p
}

func (x SubscribeReq_Operations) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscribeReq_Operations) Descriptor() protoreflect.EnumDescriptor {
	return file_AppFrame_proto_enumTypes[7].Descriptor()
}

func (SubscribeReq_Operations) Type() protoreflect.EnumType {
	return &file_AppFrame_proto_enumTypes[7]
}

func (x SubscribeReq_Operations) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscribeReq_Operations.Descriptor instead.
func (SubscribeReq_Operations) EnumDescriptor() ([]byte, []int) {
	return file_AppFrame_proto_rawDescGZIP(), []int{9, 0}
}

type AppHeartPulse_PulseType int32

const (
	AppHeartPulse_IDUnknow AppHeartPulse_PulseType = 0 //保留
	AppHeartPulse_RESTART  AppHeartPulse_PulseType = 1 //启动后第一次发心跳
	AppHeartPulse_USUAL    AppHeartPulse_PulseType = 2 //平时发送的心跳
)

// Enum value maps for AppHeartPulse_PulseType.
var (
	AppHeartPulse_PulseType_name = map[int32]string{
		0: "IDUnknow",
		1: "RESTART",
		2: "USUAL",
	}
	AppHeartPulse_PulseType_value = map[string]int32{
		"IDUnknow": 0,
		"RESTART":  1,
		"USUAL":    2,
	}
)

func (x AppHeartPulse_PulseType) Enum() *AppHeartPulse_PulseType {
	p := new(AppHeartPulse_PulseType)
	*p = x
	return p
}

func (x AppHeartPulse_PulseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppHeartPulse_PulseType) Descriptor() protoreflect.EnumDescriptor {
	return file_AppFrame_proto_enumTypes[8].Descriptor()
}

func (AppHeartPulse_PulseType) Type() protoreflect.EnumType {
	return &file_AppFrame_proto_enumTypes[8]
}

func (x AppHeartPulse_PulseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppHeartPulse_PulseType.Descriptor instead.
func (AppHeartPulse_PulseType) EnumDescriptor() ([]byte, []int) {
	return file_AppFrame_proto_rawDescGZIP(), []int{11, 0}
}

// 一般来自于Online 与Login
// 表示Gate的某个连接，用户登录成功，或者注销登录了，或者被顶号登录了
type GateClientAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base       *BaseInfo            `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	GateConnId uint64               `protobuf:"varint,2,opt,name=gate_conn_id,json=gateConnId,proto3" json:"gate_conn_id,omitempty"`
	AuthState  GateClientAuth_State `protobuf:"varint,3,opt,name=auth_state,json=authState,proto3,enum=protodefine.GateClientAuth_State" json:"auth_state,omitempty"`
	UserId     uint64               `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GateClientAuth) Reset() {
	*x = GateClientAuth{}
	mi := &file_AppFrame_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GateClientAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GateClientAuth) ProtoMessage() {}

func (x *GateClientAuth) ProtoReflect() protoreflect.Message {
	mi := &file_AppFrame_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GateClientAuth.ProtoReflect.Descriptor instead.
func (*GateClientAuth) Descriptor() ([]byte, []int) {
	return file_AppFrame_proto_rawDescGZIP(), []int{0}
}

func (x *GateClientAuth) GetBase() *BaseInfo {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GateClientAuth) GetGateConnId() uint64 {
	if x != nil {
		return x.GateConnId
	}
	return 0
}

func (x *GateClientAuth) GetAuthState() GateClientAuth_State {
	if x != nil {
		return x.AuthState
	}
	return GateClientAuth_AuthSet
}

func (x *GateClientAuth) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 来自于Gate,表示相关联接在发报文到appss
type GateSingleConnectPulse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base         *BaseInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	NetSpeed     uint32    `protobuf:"varint,2,opt,name=net_speed,json=netSpeed,proto3" json:"net_speed,omitempty"`
	IsConnectted bool      `protobuf:"varint,3,opt,name=is_connectted,json=isConnectted,proto3" json:"is_connectted,omitempty"`
	UserId       uint64    `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ConnId       uint64    `protobuf:"varint,5,opt,name=conn_id,json=connId,proto3" json:"conn_id,omitempty"`
}

func (x *GateSingleConnectPulse) Reset() {
	*x = GateSingleConnectPulse{}
	mi := &file_AppFrame_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GateSingleConnectPulse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GateSingleConnectPulse) ProtoMessage() {}

func (x *GateSingleConnectPulse) ProtoReflect() protoreflect.Message {
	mi := &file_AppFrame_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GateSingleConnectPulse.ProtoReflect.Descriptor instead.
func (*GateSingleConnectPulse) Descriptor() ([]byte, []int) {
	return file_AppFrame_proto_rawDescGZIP(), []int{1}
}

func (x *GateSingleConnectPulse) GetBase() *BaseInfo {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GateSingleConnectPulse) GetNetSpeed() uint32 {
	if x != nil {
		return x.NetSpeed
	}
	return 0
}

func (x *GateSingleConnectPulse) GetIsConnectted() bool {
	if x != nil {
		return x.IsConnectted
	}
	return false
}

func (x *GateSingleConnectPulse) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GateSingleConnectPulse) GetConnId() uint64 {
	if x != nil {
		return x.ConnId
	}
	return 0
}

type UserOnlineReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base       *BaseInfo                `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	OnlineType UserOnlineReq_OnlineType `protobuf:"varint,2,opt,name=online_type,json=onlineType,proto3,enum=protodefine.UserOnlineReq_OnlineType" json:"online_type,omitempty"`
	// BaseUserInfo base_info=2;
	// ExtraUserInfo extra_info=3;
	// UserSessionInfo session_info = 4;
	UserId uint64 `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *UserOnlineReq) Reset() {
	*x = UserOnlineReq{}
	mi := &file_AppFrame_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserOnlineReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserOnlineReq) ProtoMessage() {}

func (x *UserOnlineReq) ProtoReflect() protoreflect.Message {
	mi := &file_AppFrame_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserOnlineReq.ProtoReflect.Descriptor instead.
func (*UserOnlineReq) Descriptor() ([]byte, []int) {
	return file_AppFrame_proto_rawDescGZIP(), []int{2}
}

func (x *UserOnlineReq) GetBase() *BaseInfo {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *UserOnlineReq) GetOnlineType() UserOnlineReq_OnlineType {
	if x != nil {
		return x.OnlineType
	}
	return UserOnlineReq_IDUnknow
}

func (x *UserOnlineReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type UserOnlineRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base      *BaseInfo            `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	ReqResult UserOnlineRsp_Result `protobuf:"varint,2,opt,name=req_result,json=reqResult,proto3,enum=protodefine.UserOnlineRsp_Result" json:"req_result,omitempty"` //0 表示成功
	RspInfo   string               `protobuf:"bytes,3,opt,name=rsp_info,json=rspInfo,proto3" json:"rsp_info,omitempty"`                                              //回复出错时的信息
	UserId    uint64               `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                //关联的用户ID
	// 是否是通知，
	// 有二种情况，一种
	// 是回复，另一种是通知
	IsNotify bool `protobuf:"varint,5,opt,name=is_notify,json=isNotify,proto3" json:"is_notify,omitempty"`
	// 下面这二项，只有在比赛房间，且成功才有。
	PlanId  uint64 `protobuf:"varint,6,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	MatchId uint64 `protobuf:"varint,7,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
}

func (x *UserOnlineRsp) Reset() {
	*x = UserOnlineRsp{}
	mi := &file_AppFrame_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserOnlineRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserOnlineRsp) ProtoMessage() {}

func (x *UserOnlineRsp) ProtoReflect() protoreflect.Message {
	mi := &file_AppFrame_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserOnlineRsp.ProtoReflect.Descriptor instead.
func (*UserOnlineRsp) Descriptor() ([]byte, []int) {
	return file_AppFrame_proto_rawDescGZIP(), []int{3}
}

func (x *UserOnlineRsp) GetBase() *BaseInfo {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *UserOnlineRsp) GetReqResult() UserOnlineRsp_Result {
	if x != nil {
		return x.ReqResult
	}
	return UserOnlineRsp_IDUnknow
}

func (x *UserOnlineRsp) GetRspInfo() string {
	if x != nil {
		return x.RspInfo
	}
	return ""
}

func (x *UserOnlineRsp) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserOnlineRsp) GetIsNotify() bool {
	if x != nil {
		return x.IsNotify
	}
	return false
}

func (x *UserOnlineRsp) GetPlanId() uint64 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

func (x *UserOnlineRsp) GetMatchId() uint64 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

type UserOffline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base    *BaseInfo               `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	OffType UserOffline_OfflineType `protobuf:"varint,2,opt,name=off_type,json=offType,proto3,enum=protodefine.UserOffline_OfflineType" json:"off_type,omitempty"` //掉线、离开类型
	UserId  uint64                  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                             //用户ID
}

func (x *UserOffline) Reset() {
	*x = UserOffline{}
	mi := &file_AppFrame_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserOffline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserOffline) ProtoMessage() {}

func (x *UserOffline) ProtoReflect() protoreflect.Message {
	mi := &file_AppFrame_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserOffline.ProtoReflect.Descriptor instead.
func (*UserOffline) Descriptor() ([]byte, []int) {
	return file_AppFrame_proto_rawDescGZIP(), []int{4}
}

func (x *UserOffline) GetBase() *BaseInfo {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *UserOffline) GetOffType() UserOffline_OfflineType {
	if x != nil {
		return x.OffType
	}
	return UserOffline_IDUnknow
}

func (x *UserOffline) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type QueryUserInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base      *BaseInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	UserId    uint64    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SessionId uint64    `protobuf:"varint,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *QueryUserInfoReq) Reset() {
	*x = QueryUserInfoReq{}
	mi := &file_AppFrame_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryUserInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUserInfoReq) ProtoMessage() {}

func (x *QueryUserInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_AppFrame_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUserInfoReq.ProtoReflect.Descriptor instead.
func (*QueryUserInfoReq) Descriptor() ([]byte, []int) {
	return file_AppFrame_proto_rawDescGZIP(), []int{5}
}

func (x *QueryUserInfoReq) GetBase() *BaseInfo {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *QueryUserInfoReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *QueryUserInfoReq) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

type QueryUserInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base      *BaseInfo               `protobuf:"bytes,10,opt,name=base,proto3" json:"base,omitempty"`
	UserId    uint64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SessionId uint64                  `protobuf:"varint,9,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ReqResult QueryUserInfoRsp_Result `protobuf:"varint,2,opt,name=req_result,json=reqResult,proto3,enum=protodefine.QueryUserInfoRsp_Result" json:"req_result,omitempty"`
	ErrInfo   string                  `protobuf:"bytes,3,opt,name=err_info,json=errInfo,proto3" json:"err_info,omitempty"`
}

func (x *QueryUserInfoRsp) Reset() {
	*x = QueryUserInfoRsp{}
	mi := &file_AppFrame_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryUserInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUserInfoRsp) ProtoMessage() {}

func (x *QueryUserInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_AppFrame_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUserInfoRsp.ProtoReflect.Descriptor instead.
func (*QueryUserInfoRsp) Descriptor() ([]byte, []int) {
	return file_AppFrame_proto_rawDescGZIP(), []int{6}
}

func (x *QueryUserInfoRsp) GetBase() *BaseInfo {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *QueryUserInfoRsp) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *QueryUserInfoRsp) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *QueryUserInfoRsp) GetReqResult() QueryUserInfoRsp_Result {
	if x != nil {
		return x.ReqResult
	}
	return QueryUserInfoRsp_IDUnknow
}

func (x *QueryUserInfoRsp) GetErrInfo() string {
	if x != nil {
		return x.ErrInfo
	}
	return ""
}

type ChangeFundReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *BaseInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	// repeated  FundItem array_change=1;
	ChangeReason uint32 `protobuf:"varint,2,opt,name=change_reason,json=changeReason,proto3" json:"change_reason,omitempty"` //变更原因
	GameId       uint32 `protobuf:"varint,3,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`                   //游戏大类
	TableId      uint32 `protobuf:"varint,4,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`                //所在桌
	SeatIndex    uint32 `protobuf:"varint,5,opt,name=seat_index,json=seatIndex,proto3" json:"seat_index,omitempty"`          //所有seat
	Note         string `protobuf:"bytes,6,opt,name=note,proto3" json:"note,omitempty"`                                      //注释
}

func (x *ChangeFundReq) Reset() {
	*x = ChangeFundReq{}
	mi := &file_AppFrame_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeFundReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeFundReq) ProtoMessage() {}

func (x *ChangeFundReq) ProtoReflect() protoreflect.Message {
	mi := &file_AppFrame_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeFundReq.ProtoReflect.Descriptor instead.
func (*ChangeFundReq) Descriptor() ([]byte, []int) {
	return file_AppFrame_proto_rawDescGZIP(), []int{7}
}

func (x *ChangeFundReq) GetBase() *BaseInfo {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ChangeFundReq) GetChangeReason() uint32 {
	if x != nil {
		return x.ChangeReason
	}
	return 0
}

func (x *ChangeFundReq) GetGameId() uint32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *ChangeFundReq) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *ChangeFundReq) GetSeatIndex() uint32 {
	if x != nil {
		return x.SeatIndex
	}
	return 0
}

func (x *ChangeFundReq) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type ChangeFundRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base         *BaseInfo `protobuf:"bytes,4,opt,name=base,proto3" json:"base,omitempty"`
	ChangeResult uint32    `protobuf:"varint,1,opt,name=change_result,json=changeResult,proto3" json:"change_result,omitempty"` //变更结果
	FailInfo     string    `protobuf:"bytes,2,opt,name=fail_info,json=failInfo,proto3" json:"fail_info,omitempty"`              //失败原因。
}

func (x *ChangeFundRsp) Reset() {
	*x = ChangeFundRsp{}
	mi := &file_AppFrame_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeFundRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeFundRsp) ProtoMessage() {}

func (x *ChangeFundRsp) ProtoReflect() protoreflect.Message {
	mi := &file_AppFrame_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeFundRsp.ProtoReflect.Descriptor instead.
func (*ChangeFundRsp) Descriptor() ([]byte, []int) {
	return file_AppFrame_proto_rawDescGZIP(), []int{8}
}

func (x *ChangeFundRsp) GetBase() *BaseInfo {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ChangeFundRsp) GetChangeResult() uint32 {
	if x != nil {
		return x.ChangeResult
	}
	return 0
}

func (x *ChangeFundRsp) GetFailInfo() string {
	if x != nil {
		return x.FailInfo
	}
	return ""
}

type SubscribeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base      *BaseInfo               `protobuf:"bytes,3,opt,name=base,proto3" json:"base,omitempty"`
	ReqType   SubscribeReq_Operations `protobuf:"varint,1,opt,name=req_type,json=reqType,proto3,enum=protodefine.SubscribeReq_Operations" json:"req_type,omitempty"` //是否要取消事件订阅
	ArrUserId []uint64                `protobuf:"varint,2,rep,packed,name=arr_user_id,json=arrUserId,proto3" json:"arr_user_id,omitempty"`                           //需要操作的用户id组
}

func (x *SubscribeReq) Reset() {
	*x = SubscribeReq{}
	mi := &file_AppFrame_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeReq) ProtoMessage() {}

func (x *SubscribeReq) ProtoReflect() protoreflect.Message {
	mi := &file_AppFrame_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeReq.ProtoReflect.Descriptor instead.
func (*SubscribeReq) Descriptor() ([]byte, []int) {
	return file_AppFrame_proto_rawDescGZIP(), []int{9}
}

func (x *SubscribeReq) GetBase() *BaseInfo {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *SubscribeReq) GetReqType() SubscribeReq_Operations {
	if x != nil {
		return x.ReqType
	}
	return SubscribeReq_IDUnknow
}

func (x *SubscribeReq) GetArrUserId() []uint64 {
	if x != nil {
		return x.ArrUserId
	}
	return nil
}

type UserLeaveMatchNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *BaseInfo `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`
	// 如果这个users为空，则表示应当清空这个app所有的在线用户 （比赛）
	ArrUserId []uint64 `protobuf:"varint,1,rep,packed,name=arr_user_id,json=arrUserId,proto3" json:"arr_user_id,omitempty"`
}

func (x *UserLeaveMatchNotify) Reset() {
	*x = UserLeaveMatchNotify{}
	mi := &file_AppFrame_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserLeaveMatchNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLeaveMatchNotify) ProtoMessage() {}

func (x *UserLeaveMatchNotify) ProtoReflect() protoreflect.Message {
	mi := &file_AppFrame_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLeaveMatchNotify.ProtoReflect.Descriptor instead.
func (*UserLeaveMatchNotify) Descriptor() ([]byte, []int) {
	return file_AppFrame_proto_rawDescGZIP(), []int{10}
}

func (x *UserLeaveMatchNotify) GetBase() *BaseInfo {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *UserLeaveMatchNotify) GetArrUserId() []uint64 {
	if x != nil {
		return x.ArrUserId
	}
	return nil
}

type AppHeartPulse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base      *BaseInfo               `protobuf:"bytes,5,opt,name=base,proto3" json:"base,omitempty"`
	PulseData AppHeartPulse_PulseType `protobuf:"varint,1,opt,name=pulse_data,json=pulseData,proto3,enum=protodefine.AppHeartPulse_PulseType" json:"pulse_data,omitempty"` //同步数据
	AppId     uint32                  `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`                                                      //发送方的appid
	AppType   uint32                  `protobuf:"varint,3,opt,name=app_type,json=appType,proto3" json:"app_type,omitempty"`                                                //app类型
	AttData   uint64                  `protobuf:"varint,4,opt,name=att_data,json=attData,proto3" json:"att_data,omitempty"`
}

func (x *AppHeartPulse) Reset() {
	*x = AppHeartPulse{}
	mi := &file_AppFrame_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppHeartPulse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppHeartPulse) ProtoMessage() {}

func (x *AppHeartPulse) ProtoReflect() protoreflect.Message {
	mi := &file_AppFrame_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppHeartPulse.ProtoReflect.Descriptor instead.
func (*AppHeartPulse) Descriptor() ([]byte, []int) {
	return file_AppFrame_proto_rawDescGZIP(), []int{11}
}

func (x *AppHeartPulse) GetBase() *BaseInfo {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *AppHeartPulse) GetPulseData() AppHeartPulse_PulseType {
	if x != nil {
		return x.PulseData
	}
	return AppHeartPulse_IDUnknow
}

func (x *AppHeartPulse) GetAppId() uint32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *AppHeartPulse) GetAppType() uint32 {
	if x != nil {
		return x.AppType
	}
	return 0
}

func (x *AppHeartPulse) GetAttData() uint64 {
	if x != nil {
		return x.AttData
	}
	return 0
}

type WorkLoadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base     *BaseInfo `protobuf:"bytes,4,opt,name=base,proto3" json:"base,omitempty"`
	AttData  uint32    `protobuf:"varint,1,opt,name=att_data,json=attData,proto3" json:"att_data,omitempty"` //附加参数，请自行使用与分析
	AttInfo  string    `protobuf:"bytes,2,opt,name=att_info,json=attInfo,proto3" json:"att_info,omitempty"`  //附加参数2,请自行使用与分析
	GameKind uint32    `protobuf:"varint,3,opt,name=game_kind,json=gameKind,proto3" json:"game_kind,omitempty"`
}

func (x *WorkLoadReq) Reset() {
	*x = WorkLoadReq{}
	mi := &file_AppFrame_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkLoadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkLoadReq) ProtoMessage() {}

func (x *WorkLoadReq) ProtoReflect() protoreflect.Message {
	mi := &file_AppFrame_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkLoadReq.ProtoReflect.Descriptor instead.
func (*WorkLoadReq) Descriptor() ([]byte, []int) {
	return file_AppFrame_proto_rawDescGZIP(), []int{12}
}

func (x *WorkLoadReq) GetBase() *BaseInfo {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *WorkLoadReq) GetAttData() uint32 {
	if x != nil {
		return x.AttData
	}
	return 0
}

func (x *WorkLoadReq) GetAttInfo() string {
	if x != nil {
		return x.AttInfo
	}
	return ""
}

func (x *WorkLoadReq) GetGameKind() uint32 {
	if x != nil {
		return x.GameKind
	}
	return 0
}

type WorkLoadRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base        *BaseInfo `protobuf:"bytes,4,opt,name=base,proto3" json:"base,omitempty"`
	MaxLoad     uint32    `protobuf:"varint,1,opt,name=max_load,json=maxLoad,proto3" json:"max_load,omitempty"`             //最大设计负载
	CurrentLoad uint32    `protobuf:"varint,2,opt,name=current_load,json=currentLoad,proto3" json:"current_load,omitempty"` //当前负载
	GameKind    uint32    `protobuf:"varint,3,opt,name=game_kind,json=gameKind,proto3" json:"game_kind,omitempty"`
}

func (x *WorkLoadRsp) Reset() {
	*x = WorkLoadRsp{}
	mi := &file_AppFrame_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkLoadRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkLoadRsp) ProtoMessage() {}

func (x *WorkLoadRsp) ProtoReflect() protoreflect.Message {
	mi := &file_AppFrame_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkLoadRsp.ProtoReflect.Descriptor instead.
func (*WorkLoadRsp) Descriptor() ([]byte, []int) {
	return file_AppFrame_proto_rawDescGZIP(), []int{13}
}

func (x *WorkLoadRsp) GetBase() *BaseInfo {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *WorkLoadRsp) GetMaxLoad() uint32 {
	if x != nil {
		return x.MaxLoad
	}
	return 0
}

func (x *WorkLoadRsp) GetCurrentLoad() uint32 {
	if x != nil {
		return x.CurrentLoad
	}
	return 0
}

func (x *WorkLoadRsp) GetGameKind() uint32 {
	if x != nil {
		return x.GameKind
	}
	return 0
}

type MsgToBatchUsers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base         *BaseInfo `protobuf:"bytes,6,opt,name=base,proto3" json:"base,omitempty"`
	ArrayUserId  []uint64  `protobuf:"varint,1,rep,packed,name=array_user_id,json=arrayUserId,proto3" json:"array_user_id,omitempty"` //用户id组
	DataCmdkind  uint32    `protobuf:"varint,2,opt,name=data_cmdkind,json=dataCmdkind,proto3" json:"data_cmdkind,omitempty"`          //报文大类
	DataCmdsubid uint32    `protobuf:"varint,3,opt,name=data_cmdsubid,json=dataCmdsubid,proto3" json:"data_cmdsubid,omitempty"`       //报文小类
	DataBuff     []byte    `protobuf:"bytes,4,opt,name=data_buff,json=dataBuff,proto3" json:"data_buff,omitempty"`                    //报文数据
	AttSessionid uint64    `protobuf:"varint,5,opt,name=att_sessionid,json=attSessionid,proto3" json:"att_sessionid,omitempty"`       //关联的session id
}

func (x *MsgToBatchUsers) Reset() {
	*x = MsgToBatchUsers{}
	mi := &file_AppFrame_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MsgToBatchUsers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgToBatchUsers) ProtoMessage() {}

func (x *MsgToBatchUsers) ProtoReflect() protoreflect.Message {
	mi := &file_AppFrame_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgToBatchUsers.ProtoReflect.Descriptor instead.
func (*MsgToBatchUsers) Descriptor() ([]byte, []int) {
	return file_AppFrame_proto_rawDescGZIP(), []int{14}
}

func (x *MsgToBatchUsers) GetBase() *BaseInfo {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *MsgToBatchUsers) GetArrayUserId() []uint64 {
	if x != nil {
		return x.ArrayUserId
	}
	return nil
}

func (x *MsgToBatchUsers) GetDataCmdkind() uint32 {
	if x != nil {
		return x.DataCmdkind
	}
	return 0
}

func (x *MsgToBatchUsers) GetDataCmdsubid() uint32 {
	if x != nil {
		return x.DataCmdsubid
	}
	return 0
}

func (x *MsgToBatchUsers) GetDataBuff() []byte {
	if x != nil {
		return x.DataBuff
	}
	return nil
}

func (x *MsgToBatchUsers) GetAttSessionid() uint64 {
	if x != nil {
		return x.AttSessionid
	}
	return 0
}

type StopAppReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base    *BaseInfo `protobuf:"bytes,3,opt,name=base,proto3" json:"base,omitempty"`
	AppId   uint32    `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	AppType uint32    `protobuf:"varint,2,opt,name=app_type,json=appType,proto3" json:"app_type,omitempty"`
}

func (x *StopAppReq) Reset() {
	*x = StopAppReq{}
	mi := &file_AppFrame_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopAppReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopAppReq) ProtoMessage() {}

func (x *StopAppReq) ProtoReflect() protoreflect.Message {
	mi := &file_AppFrame_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopAppReq.ProtoReflect.Descriptor instead.
func (*StopAppReq) Descriptor() ([]byte, []int) {
	return file_AppFrame_proto_rawDescGZIP(), []int{15}
}

func (x *StopAppReq) GetBase() *BaseInfo {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *StopAppReq) GetAppId() uint32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *StopAppReq) GetAppType() uint32 {
	if x != nil {
		return x.AppType
	}
	return 0
}

type StopAppRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base    *BaseInfo `protobuf:"bytes,3,opt,name=base,proto3" json:"base,omitempty"`
	AppId   uint32    `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	AppType uint32    `protobuf:"varint,2,opt,name=app_type,json=appType,proto3" json:"app_type,omitempty"`
}

func (x *StopAppRsp) Reset() {
	*x = StopAppRsp{}
	mi := &file_AppFrame_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopAppRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopAppRsp) ProtoMessage() {}

func (x *StopAppRsp) ProtoReflect() protoreflect.Message {
	mi := &file_AppFrame_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopAppRsp.ProtoReflect.Descriptor instead.
func (*StopAppRsp) Descriptor() ([]byte, []int) {
	return file_AppFrame_proto_rawDescGZIP(), []int{16}
}

func (x *StopAppRsp) GetBase() *BaseInfo {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *StopAppRsp) GetAppId() uint32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *StopAppRsp) GetAppType() uint32 {
	if x != nil {
		return x.AppType
	}
	return 0
}

type BroadcastToCenter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base           *BaseInfo `protobuf:"bytes,6,opt,name=base,proto3" json:"base,omitempty"`
	Description    string    `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	GameKind       uint32    `protobuf:"varint,2,opt,name=game_kind,json=gameKind,proto3" json:"game_kind,omitempty"`
	IsOnlySelfKind bool      `protobuf:"varint,3,opt,name=is_only_self_kind,json=isOnlySelfKind,proto3" json:"is_only_self_kind,omitempty"` //是否只对同一类游戏广播，如果=true,那么game_kind有效，如果=false,就不根据game_kind广播
}

func (x *BroadcastToCenter) Reset() {
	*x = BroadcastToCenter{}
	mi := &file_AppFrame_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BroadcastToCenter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastToCenter) ProtoMessage() {}

func (x *BroadcastToCenter) ProtoReflect() protoreflect.Message {
	mi := &file_AppFrame_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastToCenter.ProtoReflect.Descriptor instead.
func (*BroadcastToCenter) Descriptor() ([]byte, []int) {
	return file_AppFrame_proto_rawDescGZIP(), []int{17}
}

func (x *BroadcastToCenter) GetBase() *BaseInfo {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *BroadcastToCenter) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BroadcastToCenter) GetGameKind() uint32 {
	if x != nil {
		return x.GameKind
	}
	return 0
}

func (x *BroadcastToCenter) GetIsOnlySelfKind() bool {
	if x != nil {
		return x.IsOnlySelfKind
	}
	return false
}

type BroadcastToClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base         *BaseInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	DataCmdkind  uint32    `protobuf:"varint,2,opt,name=data_cmdkind,json=dataCmdkind,proto3" json:"data_cmdkind,omitempty"`    //报文大类
	DataCmdsubid uint32    `protobuf:"varint,3,opt,name=data_cmdsubid,json=dataCmdsubid,proto3" json:"data_cmdsubid,omitempty"` //报文小类
	DataBuff     []byte    `protobuf:"bytes,4,opt,name=data_buff,json=dataBuff,proto3" json:"data_buff,omitempty"`              //报文数据
}

func (x *BroadcastToClient) Reset() {
	*x = BroadcastToClient{}
	mi := &file_AppFrame_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BroadcastToClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastToClient) ProtoMessage() {}

func (x *BroadcastToClient) ProtoReflect() protoreflect.Message {
	mi := &file_AppFrame_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastToClient.ProtoReflect.Descriptor instead.
func (*BroadcastToClient) Descriptor() ([]byte, []int) {
	return file_AppFrame_proto_rawDescGZIP(), []int{18}
}

func (x *BroadcastToClient) GetBase() *BaseInfo {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *BroadcastToClient) GetDataCmdkind() uint32 {
	if x != nil {
		return x.DataCmdkind
	}
	return 0
}

func (x *BroadcastToClient) GetDataCmdsubid() uint32 {
	if x != nil {
		return x.DataCmdsubid
	}
	return 0
}

func (x *BroadcastToClient) GetDataBuff() []byte {
	if x != nil {
		return x.DataBuff
	}
	return nil
}

var File_AppFrame_proto protoreflect.FileDescriptor

var file_AppFrame_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x41, 0x70, 0x70, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x1a, 0x0b, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf3, 0x01, 0x0a, 0x0e, 0x47,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x12, 0x29, 0x0a,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x67, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x67, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0a, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x2e, 0x47, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x74, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x75, 0x74, 0x68, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x75,
	0x74, 0x68, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x10, 0x02,
	0x22, 0xb7, 0x01, 0x0a, 0x16, 0x47, 0x61, 0x74, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x5f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x74, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x6e, 0x49, 0x64, 0x22, 0xd7, 0x01, 0x0a, 0x0d, 0x55,
	0x73, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x0a, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x44, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x4c, 0x5f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x4c, 0x5f, 0x52, 0x65, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x10, 0x02, 0x22, 0xb0, 0x02, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x12, 0x40, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x73,
	0x70, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x09, 0x72, 0x65, 0x71, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x73, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x44, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x02, 0x22, 0xdd, 0x01, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72,
	0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x4f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x0b,
	0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x49,
	0x44, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x4c, 0x5f,
	0x42, 0x72, 0x65, 0x61, 0x6b, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x4c, 0x5f, 0x4f, 0x66,
	0x66, 0x4c, 0x69, 0x6e, 0x65, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x4c, 0x5f, 0x54, 0x69,
	0x6d, 0x65, 0x4f, 0x75, 0x74, 0x10, 0x05, 0x22, 0x75, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x89,
	0x02, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x72, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x72, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x32, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x0c, 0x0a, 0x08, 0x49, 0x44, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4e,
	0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x02, 0x22, 0xc6, 0x01, 0x0a, 0x0d, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x67,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x6f, 0x74, 0x65, 0x22, 0x7c, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x75, 0x6e,
	0x64, 0x52, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0xfe, 0x01, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x29, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x3f, 0x0a,
	0x08, 0x72, 0x65, 0x71, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x72, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0b, 0x61, 0x72, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x09, 0x61, 0x72, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x62,
	0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0c, 0x0a, 0x08,
	0x49, 0x44, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55,
	0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x10, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x12,
	0x11, 0x0a, 0x0d, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x41, 0x4c, 0x4c,
	0x10, 0x04, 0x22, 0x61, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x29, 0x0a, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x61, 0x72, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xff, 0x01, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x48, 0x65, 0x61, 0x72, 0x74, 0x50, 0x75, 0x6c,
	0x73, 0x65, 0x2e, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x75,
	0x6c, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x61, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x74, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x74, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x31, 0x0a, 0x09, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x44, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x55, 0x53, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x22, 0x8b, 0x01, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b,
	0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x74, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x74, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x74, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x6d,
	0x65, 0x4b, 0x69, 0x6e, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x4c, 0x6f,
	0x61, 0x64, 0x52, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x22, 0xea, 0x01, 0x0a, 0x0f,
	0x4d, 0x73, 0x67, 0x54, 0x6f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12,
	0x29, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6d, 0x64, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6d, 0x64, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6d, 0x64, 0x73, 0x75, 0x62,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6d,
	0x64, 0x73, 0x75, 0x62, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62,
	0x75, 0x66, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x75, 0x66, 0x66, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x22, 0x69, 0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x70,
	0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x70, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x69, 0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x70, 0x70, 0x52, 0x73,
	0x70, 0x12, 0x29, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa8,
	0x01, 0x0a, 0x11, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x6f, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x29,
	0x0a, 0x11, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x4f, 0x6e, 0x6c,
	0x79, 0x53, 0x65, 0x6c, 0x66, 0x4b, 0x69, 0x6e, 0x64, 0x22, 0xa3, 0x01, 0x0a, 0x11, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x29, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x63, 0x6d, 0x64, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6d, 0x64, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6d, 0x64, 0x73, 0x75, 0x62, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6d, 0x64, 0x73, 0x75, 0x62,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x42, 0x75, 0x66, 0x66, 0x2a,
	0xcd, 0x03, 0x0a, 0x0e, 0x43, 0x4d, 0x44, 0x49, 0x44, 0x5f, 0x41, 0x70, 0x70, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x44, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x49, 0x44, 0x47, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x44, 0x47, 0x61, 0x74, 0x65,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x75, 0x6c,
	0x73, 0x65, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x44, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x44, 0x55,
	0x73, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x73, 0x70, 0x10, 0x04, 0x12, 0x11,
	0x0a, 0x0d, 0x49, 0x44, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x10,
	0x05, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x44, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x52, 0x65, 0x71, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x44, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x65, 0x61, 0x76, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x10,
	0x07, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x44, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x44, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x10,
	0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x44, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x75, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x44, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x73, 0x70, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x49,
	0x44, 0x41, 0x70, 0x70, 0x48, 0x65, 0x61, 0x72, 0x74, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x10, 0x0d,
	0x12, 0x11, 0x0a, 0x0d, 0x49, 0x44, 0x57, 0x6f, 0x72, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x44, 0x57, 0x6f, 0x72, 0x6b, 0x4c, 0x6f, 0x61,
	0x64, 0x52, 0x73, 0x70, 0x10, 0x0f, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x44, 0x4d, 0x73, 0x67, 0x54,
	0x6f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x73, 0x10, 0x10, 0x12, 0x10, 0x0a,
	0x0c, 0x49, 0x44, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x10, 0x11, 0x12,
	0x10, 0x0a, 0x0c, 0x49, 0x44, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x70, 0x70, 0x52, 0x73, 0x70, 0x10,
	0x12, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x44, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x54, 0x6f, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x10, 0x13, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x44,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x10, 0x14, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x44, 0x4c, 0x61, 0x73, 0x74, 0x10, 0x64, 0x2a,
	0x49, 0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x54, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x54, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x54, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x10, 0x02, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x33, 0x7a, 0x68, 0x65, 0x6e, 0x67, 0x2f,
	0x72, 0x61, 0x69, 0x6c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_AppFrame_proto_rawDescOnce sync.Once
	file_AppFrame_proto_rawDescData = file_AppFrame_proto_rawDesc
)

func file_AppFrame_proto_rawDescGZIP() []byte {
	file_AppFrame_proto_rawDescOnce.Do(func() {
		file_AppFrame_proto_rawDescData = protoimpl.X.CompressGZIP(file_AppFrame_proto_rawDescData)
	})
	return file_AppFrame_proto_rawDescData
}

var file_AppFrame_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_AppFrame_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_AppFrame_proto_goTypes = []any{
	(CMDID_AppFrame)(0),            // 0: protodefine.CMDID_AppFrame
	(EventType_Online)(0),          // 1: protodefine.EventType_Online
	(GateClientAuth_State)(0),      // 2: protodefine.GateClientAuth.State
	(UserOnlineReq_OnlineType)(0),  // 3: protodefine.UserOnlineReq.OnlineType
	(UserOnlineRsp_Result)(0),      // 4: protodefine.UserOnlineRsp.Result
	(UserOffline_OfflineType)(0),   // 5: protodefine.UserOffline.OfflineType
	(QueryUserInfoRsp_Result)(0),   // 6: protodefine.QueryUserInfoRsp.Result
	(SubscribeReq_Operations)(0),   // 7: protodefine.SubscribeReq.Operations
	(AppHeartPulse_PulseType)(0),   // 8: protodefine.AppHeartPulse.PulseType
	(*GateClientAuth)(nil),         // 9: protodefine.GateClientAuth
	(*GateSingleConnectPulse)(nil), // 10: protodefine.GateSingleConnectPulse
	(*UserOnlineReq)(nil),          // 11: protodefine.UserOnlineReq
	(*UserOnlineRsp)(nil),          // 12: protodefine.UserOnlineRsp
	(*UserOffline)(nil),            // 13: protodefine.UserOffline
	(*QueryUserInfoReq)(nil),       // 14: protodefine.QueryUserInfoReq
	(*QueryUserInfoRsp)(nil),       // 15: protodefine.QueryUserInfoRsp
	(*ChangeFundReq)(nil),          // 16: protodefine.ChangeFundReq
	(*ChangeFundRsp)(nil),          // 17: protodefine.ChangeFundRsp
	(*SubscribeReq)(nil),           // 18: protodefine.SubscribeReq
	(*UserLeaveMatchNotify)(nil),   // 19: protodefine.UserLeaveMatchNotify
	(*AppHeartPulse)(nil),          // 20: protodefine.AppHeartPulse
	(*WorkLoadReq)(nil),            // 21: protodefine.WorkLoadReq
	(*WorkLoadRsp)(nil),            // 22: protodefine.WorkLoadRsp
	(*MsgToBatchUsers)(nil),        // 23: protodefine.MsgToBatchUsers
	(*StopAppReq)(nil),             // 24: protodefine.StopAppReq
	(*StopAppRsp)(nil),             // 25: protodefine.StopAppRsp
	(*BroadcastToCenter)(nil),      // 26: protodefine.BroadcastToCenter
	(*BroadcastToClient)(nil),      // 27: protodefine.BroadcastToClient
	(*BaseInfo)(nil),               // 28: protodefine.BaseInfo
}
var file_AppFrame_proto_depIdxs = []int32{
	28, // 0: protodefine.GateClientAuth.base:type_name -> protodefine.BaseInfo
	2,  // 1: protodefine.GateClientAuth.auth_state:type_name -> protodefine.GateClientAuth.State
	28, // 2: protodefine.GateSingleConnectPulse.base:type_name -> protodefine.BaseInfo
	28, // 3: protodefine.UserOnlineReq.base:type_name -> protodefine.BaseInfo
	3,  // 4: protodefine.UserOnlineReq.online_type:type_name -> protodefine.UserOnlineReq.OnlineType
	28, // 5: protodefine.UserOnlineRsp.base:type_name -> protodefine.BaseInfo
	4,  // 6: protodefine.UserOnlineRsp.req_result:type_name -> protodefine.UserOnlineRsp.Result
	28, // 7: protodefine.UserOffline.base:type_name -> protodefine.BaseInfo
	5,  // 8: protodefine.UserOffline.off_type:type_name -> protodefine.UserOffline.OfflineType
	28, // 9: protodefine.QueryUserInfoReq.base:type_name -> protodefine.BaseInfo
	28, // 10: protodefine.QueryUserInfoRsp.base:type_name -> protodefine.BaseInfo
	6,  // 11: protodefine.QueryUserInfoRsp.req_result:type_name -> protodefine.QueryUserInfoRsp.Result
	28, // 12: protodefine.ChangeFundReq.base:type_name -> protodefine.BaseInfo
	28, // 13: protodefine.ChangeFundRsp.base:type_name -> protodefine.BaseInfo
	28, // 14: protodefine.SubscribeReq.base:type_name -> protodefine.BaseInfo
	7,  // 15: protodefine.SubscribeReq.req_type:type_name -> protodefine.SubscribeReq.Operations
	28, // 16: protodefine.UserLeaveMatchNotify.base:type_name -> protodefine.BaseInfo
	28, // 17: protodefine.AppHeartPulse.base:type_name -> protodefine.BaseInfo
	8,  // 18: protodefine.AppHeartPulse.pulse_data:type_name -> protodefine.AppHeartPulse.PulseType
	28, // 19: protodefine.WorkLoadReq.base:type_name -> protodefine.BaseInfo
	28, // 20: protodefine.WorkLoadRsp.base:type_name -> protodefine.BaseInfo
	28, // 21: protodefine.MsgToBatchUsers.base:type_name -> protodefine.BaseInfo
	28, // 22: protodefine.StopAppReq.base:type_name -> protodefine.BaseInfo
	28, // 23: protodefine.StopAppRsp.base:type_name -> protodefine.BaseInfo
	28, // 24: protodefine.BroadcastToCenter.base:type_name -> protodefine.BaseInfo
	28, // 25: protodefine.BroadcastToClient.base:type_name -> protodefine.BaseInfo
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_AppFrame_proto_init() }
func file_AppFrame_proto_init() {
	if File_AppFrame_proto != nil {
		return
	}
	file_types_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_AppFrame_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_AppFrame_proto_goTypes,
		DependencyIndexes: file_AppFrame_proto_depIdxs,
		EnumInfos:         file_AppFrame_proto_enumTypes,
		MessageInfos:      file_AppFrame_proto_msgTypes,
	}.Build()
	File_AppFrame_proto = out.File
	file_AppFrame_proto_rawDesc = nil
	file_AppFrame_proto_goTypes = nil
	file_AppFrame_proto_depIdxs = nil
}
